{"name": "Тест перевода денег между счетами 200 рублей", "status": "broken", "statusDetails": {"message": "TypeError: AccountTransactionTemplate() takes no arguments", "trace": "self = <test_other_api.TestAccountTransactionTemplate object at 0x000001E7505A0550>, db_session = <sqlalchemy.orm.session.Session object at 0x000001E750582A50>\n\n    @allure.story(\"Корректность перевода денег между двумя счетами\")\n    @allure.description(\"\"\"\n    Этот тест проверяет корректность перевода денег между двумя счетами.\n    Шаги:\n    1. Создание двух счетов: Stan и Bob.\n    2. Перевод 200 единиц от Stan к Bob.\n    3. Проверка изменения балансов.\n    4. Очистка тестовых данных.\n    \"\"\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.label(\"qa_name\", \"Ivan Petrovich\")\n    @allure.title(\"Тест перевода денег между счетами 200 рублей\")\n    def test_accounts_transaction_template(self, db_session: Session):\n        # ====================================================================== Подготовка к тесту\n        with allure.step(\"Создание тестовых данных в базе данных: счета Stan и Bob\"):\n>           stan = AccountTransactionTemplate(user=f\"Stan_{DataGenerator.generate_random_int(10)}\", balance=1000)\nE           TypeError: AccountTransactionTemplate() takes no arguments\n\nCinescope_API_Movies\\tests\\api\\test_other_api.py:29: TypeError"}, "description": "\n    Этот тест проверяет корректность перевода денег между двумя счетами.\n    Шаги:\n    1. Создание двух счетов: Stan и Bob.\n    2. Перевод 200 единиц от Stan к Bob.\n    3. Проверка изменения балансов.\n    4. Очистка тестовых данных.\n    ", "steps": [{"name": "Создание тестовых данных в базе данных: счета Stan и Bob", "status": "broken", "statusDetails": {"message": "TypeError: AccountTransactionTemplate() takes no arguments\n", "trace": "  File \"C:\\modul_python_base_mentor\\Cinescope_API_Movies\\tests\\api\\test_other_api.py\", line 29, in test_accounts_transaction_template\n    stan = AccountTransactionTemplate(user=f\"Stan_{DataGenerator.generate_random_int(10)}\", balance=1000)\n"}, "start": 1741763501903, "stop": 1741763501903}], "start": 1741763501903, "stop": 1741763501907, "uuid": "10afe068-714b-44e1-9647-2dd9cb863c7f", "historyId": "db001f8b67a21ab618d32780292ed1c7", "testCaseId": "db001f8b67a21ab618d32780292ed1c7", "fullName": "Cinescope_API_Movies.tests.api.test_other_api.TestAccountTransactionTemplate#test_accounts_transaction_template", "labels": [{"name": "severity", "value": "critical"}, {"name": "qa_name", "value": "Ivan Petrovich"}, {"name": "epic", "value": "Тестирование транзакций"}, {"name": "feature", "value": "Тестирование транзакций между счетами"}, {"name": "story", "value": "Корректность перевода денег между двумя счетами"}, {"name": "parentSuite", "value": "Cinescope_API_Movies.tests.api"}, {"name": "suite", "value": "test_other_api"}, {"name": "subSuite", "value": "TestAccountTransactionTemplate"}, {"name": "host", "value": "DESKTOP-1N9ILVF"}, {"name": "thread", "value": "6468-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Cinescope_API_Movies.tests.api.test_other_api"}]}