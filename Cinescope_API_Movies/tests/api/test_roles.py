import pytest
from Cinescope_API_Movies.utils.data_generator import DataGenerator


class TestRoleBasedAccess:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    @pytest.mark.parametrize("role, expected_status", [
        ("USER", 403),
        ("ADMIN", 403),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 201 –Ω–∞ 403
        ("SUPER_ADMIN", 201)
    ])
    def test_create_movie_by_role(self, api_manager, user_create, role, expected_status, super_admin_token):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ —Ä–æ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∏–ª—å–º—ã"""
        user = user_create(role)
        assert "id" in user, "–û—à–∏–±–∫–∞: –≤ user_create –Ω–µ—Ç –∫–ª—é—á–∞ 'id'"

        movie_data = {
            "name": DataGenerator.generate_random_movie(),
            "price": 500,
            "description": "–§–∏–ª—å–º —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ AQA –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "location": "MSK",
            "published": True,
            "genreId": 1
        }

        assert hasattr(api_manager, "movies_api"), "–û—à–∏–±–∫–∞: —É api_manager –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ movies_api"

        updated_user = api_manager.auth_api.get_user(user["id"], super_admin_token)
        assert role in updated_user["roles"], f"–û—à–∏–±–∫–∞: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–∏ {role} –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."

        # –ü–µ—Ä–µ–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Ä–æ–ª–∏
        new_token_response = api_manager.auth_api.login_user(
            {"email": user["email"], "password": user["password"]}).json()
        new_token = new_token_response.get("accessToken")

        assert new_token, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏."

        headers = {
            "Authorization": f"Bearer {new_token}",
            "Content-Type": "application/json",
            "Accept": "application/json"
        }

        # üü† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = api_manager.movies_api.create_movie(data=movie_data, headers=headers)
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å
        assert response.status_code == expected_status, (
            f"–û–∂–∏–¥–∞–ª–∏ {expected_status}, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ {response.status_code}. –î–∞–Ω–Ω—ã–µ: {response.json()}"
        )

    @pytest.mark.parametrize("role, expected_status", [
        ("USER", 403),
        ("ADMIN", 403),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 201 –Ω–∞ 403
        ("SUPER_ADMIN", 201)
    ])
    def test_delete_movie_by_role(self, api_manager, user_create, role, expected_status, super_admin_token):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ —Ä–æ–ª–∏ –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Ñ–∏–ª—å–º—ã"""
        user = user_create(role)

        if role in ['SUPER_ADMIN']:
            movie_data = {
                "name": f"{role} Movie to Delete",
                "price": 100,
                "description": f"–§–∏–ª—å–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è {role}",
                "location": "MSK",
                "published": True,
                "genreId": 1
            }
            create_response = api_manager.movies_api.create_movie(data=movie_data, token=user.token)
            assert create_response.status_code == 201, f"{role} –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å–º, –Ω–æ –ø–æ–ª—É—á–∏–ª {create_response.status_code}"
            movie_id = create_response.json()['id']
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π –±–µ—Ä–µ–º ID —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            movie_id = 1  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∏–ª—å–º —Å —Ç–∞–∫–∏–º ID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        response = api_manager.movies_api.delete_movie(movie_id=movie_id, token=user.token)
        assert response.status_code == expected_status, f"{role} –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å {expected_status}, –Ω–æ –ø–æ–ª—É—á–∏–ª {response.status_code}"





